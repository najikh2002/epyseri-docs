{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"epyseri","text":"<p>The epyseri package is created with the aim of simplifying the software development experience, especially when connecting programs with various services. By using this package, engineers no longer need to spend time and effort writing complex code when integrating with different services.</p> <p>For now, in the epyseri package, we will focus on creating integration with Trident Trace first. This approach makes the integration process more comfortable and can potentially reduce common issues that engineers face when integrating with the Trident Trace service.</p>"},{"location":"start/","title":"Getting Started with epyseri","text":"<p>This package bundle in <code>.whl</code> file and don't rename this package file.</p>"},{"location":"start/#download","title":"Download","text":"<p>Get download file in here</p>"},{"location":"start/#install","title":"Install","text":"<p><code>pip install epyseri-0.0.1-py3-none-any.whl</code></p>"},{"location":"usage/","title":"Usage","text":"<p>Guide for using this pacakge</p>"},{"location":"usage/#init","title":"Init","text":"<pre><code>from epyseri import TridentTraceClient\n\nttc = TridentTraceClient(\n    base_url=\"string\",\n    app_name=\"string\",\n    auth_token=\"string\"\n)\n\nprint(ttc.service_domain_id, ttc.service_domain_slug)\n</code></pre>"},{"location":"usage/#health","title":"Health","text":"<p>GET <code>/health</code> - Health</p> <pre><code>get_health_result = ttc.get_health()\n\nprint(get_health_result)\n</code></pre>"},{"location":"usage/#inference","title":"Inference","text":"<p>GET <code>/api/v1/inference</code> - List Inference </p> <pre><code>get_health_result = ttc.get_health()\n\nprint(get_health_result)\n</code></pre> <p>POST <code>/api/v1/inference</code> - Create Inference </p> <pre><code>import cv2\n\nimage = cv2.imread(\"./image.jpeg\")\n\npost_inference_res = ttc.post_inference(\n        data_input = \"string\",\n        data_output = \"string\",\n        inference_time = 0,\n        business_domain = \"string\",\n        ai_domain = \"string\",\n        ai_subdomain = \"string\",\n        model_version = \"string\",\n        group_id = \"string\",\n        user = \"test\",\n        image = image,\n)\nprint(post_inference_res)\n</code></pre> <p>GET <code>/api/v1/inference/{inference_uuid}</code> - Detail Inference </p> <pre><code>get_detail_inference_res = ttc.get_detail_inference(\"74642c5b-c4ad-49f8-b1da-2d482bb424f8\")\n\nprint(get_detail_inference_res)\n</code></pre> <p>GET <code>/api/v1/inference</code> - List Group Inference </p> <pre><code>get_group_inference_res = ttc.get_group_inference(\n    business_domain = \"string\",\n    user=\"string\",\n    limit = 3,\n    offset = 0,\n)\n\nprint(get_group_inference_res)\n</code></pre> <p>GET <code>/api/v1/inference/{group_uuid}</code> - Detail Group Inference </p> <pre><code>get_group_detail_inference_res = ttc.get_detail_group_inference(\"string\")\n\nprint(get_group_detail_inference_res)\n</code></pre> <p>DELETE <code>/api/v1/inference/{inference_uuid}</code> - Delete Inference </p> <pre><code>delete_inference_res = ttc.delete_inference(\"5c462e22-dad0-46eb-9af8-fb7f34a6cf06\")\n\nprint(delete_inference_res)\n</code></pre>"},{"location":"usage/#feedback","title":"Feedback","text":"<p>POST <code>/api/v1/inference/{inference_uuid}</code> - Create Feedback</p> <pre><code>create_feedback_res = ttc.post_feedback(\n    inference_uuid=\"74642c5b-c4ad-49f8-b1da-2d482bb424f8\", \n    user_comment={\n        \"id\": 22,\n        \"user\": \"nama\",\n        \"message\": \"Test \"\n    }, \n    user_reaction=True\n)\n\nprint(create_feedback_res)\n</code></pre> <p>PUT <code>/api/v1/inference/{inference_uuid}</code> - Update Feedback</p> <pre><code>delete_inference_res = ttc.delete_inference(\"5c462e22-dad0-46eb-9af8-fb7f34a6cf06\")\n\nprint(delete_inference_res)\n</code></pre>"}]}